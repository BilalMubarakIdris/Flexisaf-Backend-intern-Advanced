// write a generic method to count the number of element in a collection that have a specific property (for example odd integers, prime numbers and palindromes)
import java.util.*;
import java.util.function.Predicate;

public class GenericElementCounter {
    // Generic method to count elements with a specific property
    public static <T> long countByProperty(Collection<T> collection, Predicate<T> predicate) {
        return collection.stream().filter(predicate).count();
    }

    public static void main(String[] args) {
        // Example 1: Counting odd integers
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        long oddCount = countByProperty(numbers, n -> n % 2 != 0);
        System.out.println("Odd numbers count: " + oddCount);

        // Example 2: Counting prime numbers
        long primeCount = countByProperty(numbers, GenericElementCounter::isPrime);
        System.out.println("Prime numbers count: " + primeCount);

        // Example 3: Counting palindromic strings
        List<String> words = Arrays.asList("racecar", "hello", "level", "world", "madam");
        long palindromeCount = countByProperty(words, GenericElementCounter::isPalindrome);
        System.out.println("Palindromes count: " + palindromeCount);
    }

    // Helper method to check if a number is prime
    private static boolean isPrime(int number) {
        if (number <= 1) return false;
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) return false;
        }
        return true;
    }

    // Helper method to check if a string is a palindrome
    private static boolean isPalindrome(String text) {
        return text.equals(new StringBuilder(text).reverse().toString());
    }
}
